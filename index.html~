<!DOCTYPE html>
<html>
  <head>
    <link rel="manifest" href="./manifest2.json">
    <title>HTML5 Create HTML5 Canvas JavaScript Drawing App Example</title>
    <script type="text/javascript" src="jquery-3.6.4.min.js"></script>

    <!--[if IE]><script type="text/javascript" src="excanvas.js"></script><![endif]-->
    <script type="text/javascript" src="html5-canvas-drawing-app.js"></script>
    <style>
      .centered {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      }
     
      div.fixed {
      position: fixed;
      top: 0;
      left: 0;
      margin:0;
      padding:0;
      width: 100%;
      height: 100%;
      }
      button.button {
      font-size:3vmin;
      }
      .controls
{
      bottom: 0;
      left: 0;
      position: absolute;
      width: 100%;
      visibility:visible;
      }
.hidden {
                display: none!important
            }

            .xsmall {
                font-size: x-small
            }

            header {
                background-color: var(--app-header-bg);
                color: var(--app-header-color);
                user-select: none
            }

            header h1 {
                font-size: x-large;
                margin: 0;
                padding: 4px 14px 0
            }

            button[disabled] {
                opacity: .5
            }

            .menuContainer {
                display: inline-block;
                position: relative
            }

            .menuContainer>button {
                background-color: inherit;
                color: inherit;
                min-width: 48px;
                padding: 4px 16px
            }

            body.altKey .kbdShortcut {
                text-decoration: underline
            }

            .menuContainer button {
                border: 0;
                cursor: pointer;
                font-size: 16px
            }

            .menuContainer button:focus {
                outline: 0
            }

            .menuContainer .menuItemContainer {
                background-color: var(--app-menu-bg);
                box-shadow: 0 8px 16px 0 rgba(0,0,0,.2);
                min-width: 180px;
                position: absolute;
                z-index: 1
            }

            .menuContainer .menuItemContainer button {
                background-color: var(--app-menu-bg);
                color: var(--app-menu-color);
                display: block;
                padding: 16px;
                text-align: left;
                width: 100%
            }

            .menuContainer kbd {
                float: right;
                font-family: inherit
            }

            .menuContainer>button:focus,.menuContainer>button:hover,.menuContainer>button[aria-expanded=true] {
                background-color: var(--app-menu-selected)
            }

            .menuItemContainer button:focus,.menuItemContainer button:hover {
                background-color: var(--app-menu-bg-highlight)
            }

            .menuContainer button[aria-checked=true] {
                background-color: var(--app-menu-toggled-bg);
                color: var(--app-menu-toggled-color)
            }

            #aDownloadFile,#filePicker,header #butClose {
                display: none
            }

            textarea {
                background-color: var(--app-editor-bg);
                box-sizing: border-box;
                flex-grow: 1;
                font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
                padding: 2px;
                white-space: pre;
                width: 100%
            }

            textarea[disabled] {
                background-color: var(--app-editor-bg-disabled)
            }

            textarea:focus {
                outline: 0
            }

            body.monospace textarea {
                font-family: monospace
            }

            body.wordwrap textarea {
                white-space: normal
            }

            details {
                background-color: var(--app-footer-bg);
                color: var(--app-footer-color);
                padding: 16px
            }

            details summary {
                cursor: pointer
            }

            summary>span {
                float: right
            }

            .footer-label {
                background-color: var(--color-10);
                border-radius: 4px;
                color: var(--color-900);
                font-size: .75em;
                padding: 4px
            }

            details #not-supported,details a,details a:visited {
                color: var(--app-footer-color-light)
            }

            details div {
                margin-top: 1em
            }

            #lastUpdated {
                display: block;
                margin-top: 8px
            }
    
</style>

  </head>
  <body style="background-color:#52d1ed;">
<!--    <button id="buttonColors" class="button" onclick="redrawInterface('colorpicker');">Select Colours</button>
    <button  class="button" onclick="redrawInterface('canvas');">Draw on Canvas</button>
    -->
<header>
 <h1>
                <span id="headerFileName">Text Editor</span>
                <span id="modifiedHeader" class="hidden">*</span>
                <span id="headerAppName" class="hidden">- Text Editor</span>
            </h1>
            <nav class="menubar">
                <div id="menuFile" class="menuContainer">
                    <button id="butFile" class="menuTop" aria-label="File" aria-haspopup="true" aria-expanded="false">
                        <span class="kbdShortcut">F</span>
                        ile
                    </button>
                    <div role="menu" class="menuItemContainer hidden">
                        <button id="butNew" type="button" role="menuitem">
                            New <kbd>^N</kbd>
                        </button>
                        <button id="butOpen" type="button" role="menuitem">
                            Open <kbd>^O</kbd>
                        </button>
                        <button id="butSave" type="button" role="menuitem">
                            Save <kbd>^S</kbd>
                        </button>
                        <button id="butSaveAs" type="button" role="menuitem">
                            Save As <kbd>^&uparrow;S</kbd>
                        </button>
                        <button id="butClose" type="button" role="menuitem">
                            Close <kbd>^W</kbd>
                        </button>
                    </div>
                </div>
                <div id="menuRecent" class="menuContainer">
                    <button id="butRecent" class="menuTop" aria-label="Recent" aria-haspopup="true" aria-expanded="false">
                        <span class="kbdShortcut">R</span>
                        ecent
                    </button>
                    <div id="recentContainer" role="menu" class="menuItemContainer hidden"></div>
                </div>
                <div id="menuEdit" class="menuContainer">
                    <button id="butEdit" class="menuTop" aria-label="Edit" aria-haspopup="true" aria-expanded="false">
                        <span class="kbdShortcut">E</span>
                        dit
                    </button>
                    <div role="menu" class="menuItemContainer hidden">
                        <button id="butCut" type="button" role="menuitem">
                            Cut <kbd>^X</kbd>
                        </button>
                        <button id="butCopy" type="button" role="menuitem">
                            Copy <kbd>^C</kbd>
                        </button>
                        <button id="butPaste" type="button" role="menuitem">
                            Paste <kbd>^V</kbd>
                        </button>
                    </div>
                </div>
                <div id="menuView" class="menuContainer">
                    <button id="butView" class="menuTop" aria-label="View" aria-haspopup="true" aria-expanded="false">
                        <span class="kbdShortcut">V</span>
                        iew
                    </button>
                    <div role="menu" class="menuItemContainer hidden">
                        <button id="butWordWrap" type="button" aria-checked="true" role="menuitemcheckbox">Word Wrap</button>
                        <button id="butMonospace" type="button" aria-checked="false" role="menuitemcheckbox">Monospace Font</button>
                        <button id="butCaptureTabs" type="button" aria-checked="true" role="menuitemcheckbox">
                            Capture Tabs <kbd>^&uparrow;M</kbd>
                        </button>
                        <button id="butFontBigger" type="button" role="menuitem">Increase Font Size</button>
                        <button id="butFontSmaller" type="button" role="menuitem">Decrease Font Size</button>
                    </div>
                </div>
                <div id="menuInstall" class="menuContainer">
                    <button id="butInstall" aria-label="Install" class="menuTop hidden">
                        <span class="kbdShortcut">I</span>
                        nstall
                    </button>
                </div>
            </nav>
        </header>


<!--<div class="fixed" id="canvasDiv" style="visibility:visible;touch-action: none;"></div>
    <div class="fixed" id="colorMenuDiv" style="visibility:hidden;overflow-y:scroll ;touch-action: pan-y;background-color:#52d1ed;"></div>
    <script type="text/javascript"> $(document).ready(function() {
    	 prepareCanvas();
      });</script>
    -->

<div class="controls">
<!--    <label for="inputId">Open Image</label>
    <input id="inputId" type="file" name="file" onchange="readFile()">
    <a id="local_filesaver" onclick="saveFile('test','test.json','json')">Save File</a>-->
	</div>
  <a id="aDownloadFile" download></a>
        <input type="file" id="filePicker">
        <details id="footer" class="footer">
            <summary>
                About 
                <span>
                    <span id="modifiedFooter" class="hidden">*</span>
                    <span id="lblLegacyFS" class="hidden footer-label">Legacy Mode</span>
                    <span id="lblTabMovesFocus" class="hidden footer-label">Tab Moves Focus</span>
                </span>
            </summary>
            <div id="not-supported">
                The <a href="https://wicg.github.io/file-system-access/" target="_blank">File System Access API</a>
                is <b>not</b>
                supported in this browser yet, and Text Editor is running in legacy mode. In legacy mode, the file modified indicators are not shown.
            </div>
            <div>
                Text Editor is a simple text editor similar to notepad that makes it easy to edit text files on your local file system. It shows how to easily use the new HTML5 File System Access APIs. To learn more about the File System Access APIs and how this demo was built, check out <a href="https://web.dev/file-system-access/" target="_blank">The file system access APIs</a>
                article on Web Fundamentals, or see the <a href="https://github.com/GoogleChromeLabs/text-editor/" target="_blank">source code on GitHub</a>
                . Written by <a href="https://twitter.com/petele" target="_blank">Pete LePage</a>
                . <small id="lastUpdated">Last Updated: 2020-11-12T23:43:29.880Z (v0.0.13)</small>
            </div>
        </details>


</div>

  </body>
    <script>
            var idbKeyval = function(e) {
                "use strict";
                class t {
                    constructor(e="keyval-store", t="keyval") {
                        this.storeName = t,
                        this._dbp = new Promise((r,n)=>{
                            const o = indexedDB.open(e, 1);
                            o.onerror = ()=>n(o.error),
                            o.onsuccess = ()=>r(o.result),
                            o.onupgradeneeded = ()=>{
                                o.result.createObjectStore(t)
                            }
                        }
                        )
                    }
                    _withIDBStore(e, t) {
                        return this._dbp.then(r=>new Promise((n,o)=>{
                            const s = r.transaction(this.storeName, e);
                            s.oncomplete = ()=>n(),
                            s.onabort = s.onerror = ()=>o(s.error),
                            t(s.objectStore(this.storeName))
                        }
                        ))
                    }
                }
                let r;
                function n() {
                    return r || (r = new t),
                    r
                }
                return e.Store = t,
                e.get = function(e, t=n()) {
                    let r;
                    return t._withIDBStore("readonly", t=>{
                        r = t.get(e)
                    }
                    ).then(()=>r.result)
                }
                ,
                e.set = function(e, t, r=n()) {
                    return r._withIDBStore("readwrite", r=>{
                        r.put(t, e)
                    }
                    )
                }
                ,
                e.del = function(e, t=n()) {
                    return t._withIDBStore("readwrite", t=>{
                        t.delete(e)
                    }
                    )
                }
                ,
                e.clear = function(e=n()) {
                    return e._withIDBStore("readwrite", e=>{
                        e.clear()
                    }
                    )
                }
                ,
                e.keys = function(e=n()) {
                    const t = [];
                    return e._withIDBStore("readonly", e=>{
                        (e.openKeyCursor || e.openCursor).call(e).onsuccess = function() {
                            this.result && (t.push(this.result.key),
                            this.result.continue())
                        }
                    }
                    ).then(()=>t)
                }
                ,
                e
            }({});
        </script>
        <script>
            "use strict";
            function gaEvent(n, e, t, a, o) {
                if ("localhost" === location.hostname)
                    return;
                const i = {
                    eventCategory: n,
                    eventAction: e
                };
                t && (i.eventLabel = t),
                a && (i.eventValue = a),
                o && (i.nonInteraction = !0),
                window.ga && window.ga("send", "event", i)
            }
            function gaTiming(n, e, t, a) {
                t = parseInt(t, 10),
                "localhost" !== location.hostname && window.ga && window.ga("send", "timing", n, e, t, a)
            }
            window.addEventListener("load", ()=>{
                setTimeout(()=>{
                    let n = "browser";
                    !0 === window.navigator.standalone ? n = "standalone-ios" : !0 === matchMedia("(display-mode: standalone)").matches && (n = "standalone"),
                    gaEvent("Window Style", n, null, null, !0)
                }
                , 3100)
            }
            ),
            window.addEventListener("load", ()=>{
                if ("performance"in window) {
                    gaTiming("Start", "window-load", Math.round(performance.now())),
                    setTimeout(()=>{
                        const n = performance.getEntriesByType("paint");
                        n && n.length > 0 && n.forEach(n=>{
                            gaTiming("Start", n.name, Math.round(n.startTime + n.duration))
                        }
                        )
                    }
                    , 3e3)
                }
            }
            ),
            window.addEventListener("DOMContentLoaded", ()=>{
                if ("performance"in window) {
                    gaTiming("Start", "dom-content-loaded", Math.round(performance.now()))
                }
                window.ga && window.ga("send", "pageview", "/")
            }
            ),
            window.addEventListener("load", ()=>{
                gaEvent("App Version", "0.0.13", null, null, !0)
            }
            ),
            document.addEventListener("visibilitychange", n=>{
                gaEvent("Page Visibility", !0 === document.hidden ? "hidden" : "visible", null, null, !0)
            }
            );
        </script>
        <script>
            "use strict";
            const app = {
                appName: "Text Editor",
                file: {
                    handle: null,
                    name: null,
                    isModified: !1
                },
                options: {
                    captureTabs: !0,
                    fontSize: 14,
                    monoSpace: !1,
                    wordWrap: !0
                },
                hasFSAccess: "chooseFileSystemEntries"in window || "showOpenFilePicker"in window,
                isMac: navigator.userAgent.includes("Mac OS X")
            };
            app.hasFSAccess ? (document.getElementById("not-supported").classList.add("hidden"),
            gaEvent("File System APIs", "FSAccess")) : (document.getElementById("lblLegacyFS").classList.toggle("hidden", !1),
            document.getElementById("butSave").classList.toggle("hidden", !0),
            gaEvent("File System APIs", "Legacy")),
            app.newFile = ()=>{
                app.confirmDiscard() && (app.setText(),
                app.setFile(),
                app.setModified(!1),
                app.setFocus(!0),
                gaEvent("FileAction", "New"))
            }
            ,
            app.openFile = async e=>{
                if (!app.confirmDiscard())
                    return;
                if (!app.hasFSAccess) {
                    gaEvent("FileAction", "Open", "Legacy");
                    const e = await app.getFileLegacy();
                    return void (e && app.readFile(e))
                }
                if (e) {
                    if (gaEvent("FileAction", "OpenRecent", "FSAccess"),
                    !1 === await verifyPermission(e, !0))
                        return
                } else {
                    gaEvent("FileAction", "Open", "FSAccess");
                    try {
                        e = await getFileHandle()
                    } catch (e) {
                        if ("AbortError" === e.name)
                            return;
                        gaEvent("Error", "FileOpen", e.name),
                        alert("An error occured trying to open the file.")
                    }
                }
                if (!e)
                    return;
                const a = await e.getFile();
                app.readFile(a, e)
            }
            ,
            app.readFile = async(e,a)=>{
                try {
                    app.setText(await readFile(e)),
                    app.setFile(a || e.name),
                    app.setModified(!1),
                    app.setFocus(!0)
                } catch (e) {
                    gaEvent("Error", "FileRead", e.name);
                    const a = `An error occured reading ${app.fileName}`;
                    alert(a)
                }
            }
            ,
            app.saveFile = async()=>{
                try {
                    if (!app.file.handle)
                        return await app.saveFileAs();
                    gaEvent("FileAction", "Save"),
                    await writeFile(app.file.handle, app.getText()),
                    app.setModified(!1)
                } catch (e) {
                    gaEvent("Error", "FileSave", e.name),
                    alert("Unable to save file")
                }
                app.setFocus()
            }
            ,
            app.saveFileAs = async()=>{
                if (!app.hasFSAccess)
                    return gaEvent("FileAction", "Save As", "Legacy"),
                    app.saveAsLegacy(app.file.name, app.getText()),
                    void app.setFocus();
                let e;
                gaEvent("FileAction", "Save As", "FSAccess");
                try {
                    e = await getNewFileHandle()
                } catch (e) {
                    if ("AbortError" === e.name)
                        return;
                    return gaEvent("Error", "FileSaveAs1", e.name),
                    void alert("An error occured trying to open the file.")
                }
                try {
                    await writeFile(e, app.getText()),
                    app.setFile(e),
                    app.setModified(!1)
                } catch (e) {
                    return gaEvent("Error", "FileSaveAs2", e.name),
                    alert("Unable to save file."),
                    void gaEvent("Error", "Unable to write file", "FSAccess")
                }
                app.setFocus()
            }
            ,
            app.quitApp = ()=>{
                app.confirmDiscard() && (gaEvent("FileAction", "Quit"),
                window.close())
            }
            ;
        </script>

		<script>
            "use strict";
            const myMenus = {
                setup: e=>{
                    const t = e.querySelector("button.menuTop");
                    t.addEventListener("click", ()=>{
                        myMenus._toggle(t)
                    }
                    ),
                    myMenus.addKeyboardShortcut(t),
                    e.addEventListener("keydown", e=>{
                        if (27 === e.keyCode)
                            return myMenus.hideAll(),
                            void app.setFocus();
                        if (40 !== e.keyCode)
                            if (38 !== e.keyCode)
                                ;
                            else {
                                const t = e.srcElement.previousElementSibling;
                                t && t.focus()
                            }
                        else {
                            const t = e.srcElement.nextElementSibling;
                            t && t.focus()
                        }
                    }
                    )
                }
                ,
                addKeyboardShortcut: e=>{
                    if (app.isMac)
                        return;
                    let t;
                    try {
                        t = e.querySelector(".kbdShortcut").textContent.trim().toLowerCase()
                    } catch (e) {}
                    t && window.addEventListener("keydown", n=>{
                        !0 === n.altKey && n.key === t && (n.preventDefault(),
                        e.click())
                    }
                    )
                }
                ,
                hideAll: ()=>{
                    document.querySelectorAll(".menuContainer").forEach(e=>{
                        myMenus.hide(e)
                    }
                    )
                }
                ,
                hide: e=>{
                    e.querySelector(".menuTop").setAttribute("aria-expanded", !1);
                    const t = e.querySelector(".menuItemContainer");
                    t && t.classList.toggle("hidden", !0)
                }
                ,
                show: e=>{
                    myMenus.hideAll(),
                    e.querySelector(".menuTop").setAttribute("aria-expanded", !0);
                    const t = e.querySelector(".menuItemContainer");
                    t.classList.toggle("hidden", !1);
                    const n = t.querySelector("button");
                    if (!n)
                        return myMenus.hideAll(),
                        void app.setFocus();
                    n.focus()
                }
                ,
                createButton: e=>{
                    const t = document.createElement("button");
                    return t.innerText = e,
                    t.setAttribute("type", "button"),
                    t.setAttribute("role", "menuitem"),
                    t
                }
                ,
                addElement: (e,t)=>{
                    e.querySelector(".menuItemContainer").appendChild(t)
                }
                ,
                clearMenu: e=>{
                    e.querySelector(".menuItemContainer").innerHTML = ""
                }
                ,
                _toggle: e=>{
                    const t = e.parentElement;
                    "true" === e.getAttribute("aria-expanded") ? myMenus.hide(t) : myMenus.show(t)
                }
            };
            app.isMac || (window.addEventListener("keydown", e=>{
                !0 === e.altKey && "Alt" === e.key && document.body.classList.toggle("altKey", !0)
            }
            ),
            window.addEventListener("keyup", e=>{
                "Alt" === e.key && document.body.classList.toggle("altKey", !1)
            }
            ));
        </script>

        
        <script>
            "use strict";
            function getFileHandle() {
                return "showOpenFilePicker"in window ? window.showOpenFilePicker().then(e=>e[0]) : window.chooseFileSystemEntries()
            }
            function getNewFileHandle() {
                if ("showSaveFilePicker"in window) {
                    const e = {
                        types: [{
                            description: "Text file",
                            accept: {
                                "text/plain": [".txt"]
                            }
                        }]
                    };
                    return window.showSaveFilePicker(e)
                }
                return window.chooseFileSystemEntries({
                    type: "save-file",
                    accepts: [{
                        description: "Text file",
                        extensions: [".txt"],
                        mimeTypes: ["text/plain"]
                    }]
                })
            }
            function readFile(e) {
                return e.text ? e.text() : _readFileLegacy(e)
            }
            function _readFileLegacy(e) {
                return new Promise(t=>{
                    const i = new FileReader;
                    i.addEventListener("loadend", e=>{
                        const i = e.srcElement.result;
                        t(i)
                    }
                    ),
                    i.readAsText(e)
                }
                )
            }
            async function writeFile(e, t) {
                if (e.createWriter) {
                    const i = await e.createWriter();
                    return await i.write(0, t),
                    void await i.close()
                }
                const i = await e.createWritable();
                await i.write(t),
                await i.close()
            }
            async function verifyPermission(e, t) {
                const i = {};
                return t && (i.writable = !0,
                i.mode = "readwrite"),
                "granted" === await e.queryPermission(i) || "granted" === await e.requestPermission(i)
            }
        </script>
        <script>
            "use strict";
            !function(e) {
                const t = document.getElementById("menu");
                myMenus.setup(t),
                document.getElementById("butNew").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.newFile()
                }
                ),
                document.getElementById("butOpen").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.openFile()
                }
                ),
                document.getElementById("butSave").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.saveFile()
                }
                ),
                document.getElementById("butSaveAs").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.saveFileAs()
                }
                ),
                document.getElementById("butClose").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.quitApp()
                }
                )
            }(app);
        </script>
        <script>
            "use strict";
            !function(e) {
                const t = document.getElementById("menuEdit");
                myMenus.setup(t),
                document.getElementById("butCut").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    document.execCommand("cut"),
                    gaEvent("Edit", "Cut")
                }
                ),
                document.getElementById("butCopy").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    document.execCommand("copy"),
                    gaEvent("Edit", "Copy")
                }
                ),
                document.getElementById("butPaste").addEventListener("click", async()=>{
                    myMenus.hide(t);
                    try {
                        const t = await navigator.clipboard.readText();
                        e.insertIntoDoc(t),
                        e.setModified(!0),
                        e.setFocus(),
                        gaEvent("Edit", "Paste")
                    } catch (e) {
                        gaEvent("Error", "Paste", e.name)
                    }
                }
                )
            }(app);
        </script>
        <script>
            "use strict";
            !function(e) {
                const t = document.getElementById("menuView");
                myMenus.setup(t);
                const n = document.getElementById("butWordWrap")
                  , o = document.getElementById("butMonospace")
                  , s = document.getElementById("butCaptureTabs")
                  , a = document.getElementById("lblTabMovesFocus");
                n.addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.toggleWordWrap()
                }
                ),
                o.addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.toggleMonospace()
                }
                ),
                s.addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.toggleCaptureTabs()
                }
                ),
                document.getElementById("butFontBigger").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.adjustFontSize(2)
                }
                ),
                document.getElementById("butFontSmaller").addEventListener("click", ()=>{
                    myMenus.hide(t),
                    e.adjustFontSize(-2)
                }
                ),
                e.toggleWordWrap = ()=>{
                    const t = document.body.classList.toggle("wordwrap");
                    n.setAttribute("aria-checked", t),
                    e.options.wordWrap = t,
                    gaEvent("Options", "Word Wrap", t ? "true" : "false")
                }
                ,
                e.toggleMonospace = ()=>{
                    const t = document.body.classList.toggle("monospace");
                    o.setAttribute("aria-checked", t),
                    e.options.monoSpace = t,
                    gaEvent("Options", "Font Face", t ? "monospace" : "normal")
                }
                ,
                e.toggleCaptureTabs = ()=>{
                    const t = !e.options.captureTabs;
                    e.options.captureTabs = t,
                    s.setAttribute("aria-checked", t),
                    a.classList.toggle("hidden", t),
                    gaEvent("Options", "Capture Tabs", t)
                }
            }(app);
        </script>
        <script>
            "use strict";
            !function(e) {
                const n = document.getElementById("menuRecent");
                myMenus.setup(n);
                let t = [];
                async function s() {
                    myMenus.clearMenu(n),
                    0 !== t.length && (t.forEach(t=>{
                        const s = myMenus.createButton(t.name);
                        s.addEventListener("click", s=>{
                            myMenus.hide(n),
                            e.openFile(t)
                        }
                        ),
                        myMenus.addElement(n, s)
                    }
                    ),
                    function() {
                        const s = myMenus.createButton("Clear");
                        s.addEventListener("click", ()=>{
                            myMenus.clearMenu(n),
                            t = [],
                            idbKeyval.clear(),
                            e.setFocus()
                        }
                        ),
                        myMenus.addElement(n, s)
                    }())
                }
                e.addRecent = async function(e) {
                    if (!e.isSameEntry)
                        return;
                    (await Promise.all(t.map(n=>e.isSameEntry(n)))).some(e=>e) || (t.unshift(e),
                    t.length > 5 && t.pop(),
                    s(),
                    idbKeyval.set("recentFiles", t))
                }
                ,
                async function() {
                    t = await idbKeyval.get("recentFiles") || [],
                    s()
                }()
            }(app);
        </script>
        <script>
            "use strict";
            !function(e) {
                const t = document.getElementById("headerAppName")
                  , n = document.getElementById("headerFileName")
                  , d = document.getElementById("modifiedHeader")
                  , i = document.getElementById("modifiedFooter");
                window.addEventListener("beforeunload", t=>{
                    e.file.isModified && (t.preventDefault(),
                    t.returnValue = "There are unsaved changes. Are you sure you want to leave?")
                }
                ),
                e.confirmDiscard = ()=>{
                    if (!e.file.isModified)
                        return !0;
                    return confirm("Discard changes? All changes will be lost.")
                }
                ,
                e.setFile = d=>{
                    d && d.name ? (e.file.handle = d,
                    e.file.name = d.name,
                    document.title = `${d.name} - ${e.appName}`,
                    n.textContent = d.name,
                    t.classList.toggle("hidden", !1),
                    e.addRecent(d)) : (e.file.handle = null,
                    e.file.name = d,
                    document.title = e.appName,
                    n.textContent = e.appName,
                    t.classList.toggle("hidden", !0))
                }
                ,
                e.setModified = t=>{
                    if (!e.hasFSAccess)
                        return;
                    e.file.isModified = t,
                    document.body.classList.toggle("modified", t);
                    const n = !t;
                    d.classList.toggle("hidden", n),
                    i.classList.toggle("hidden", n)
                }
            }(app);
        </script>
        <script>
            "use strict";
            window.addEventListener("keydown", e=>(e.ctrlKey || e.metaKey) && e.shiftKey && "KeyS" === e.code ? (e.preventDefault(),
            void app.saveFileAs()) : !0 !== e.ctrlKey && !0 !== e.metaKey || "s" !== e.key ? !0 !== e.ctrlKey && !0 !== e.metaKey || "o" !== e.key ? !0 !== e.ctrlKey && !0 !== e.metaKey || "n" !== e.key ? !0 !== e.ctrlKey && !0 !== e.metaKey || "q" !== e.key && "w" !== e.key ? void (!0 === e.ctrlKey && !0 === e.shiftKey && "M" === e.key && (e.preventDefault(),
            e.stopPropagation(),
            app.toggleCaptureTabs())) : (e.preventDefault(),
            void app.quitApp()) : (e.preventDefault(),
            void app.newFile()) : (e.preventDefault(),
            void app.openFile()) : (e.preventDefault(),
            void app.saveFile()));
        </script>
        <script>
            "use strict";
            window.addEventListener("load", ()=>{
                "serviceWorker"in navigator && navigator.serviceWorker.register("./service-worker.js")
            }
            );
        </script>
        <script>
            "use strict";
            !function(t) {
                const e = document.getElementById("butInstall");
                window.addEventListener("appinstalled", t=>{
                    gaEvent("Install", "installed")
                }
                ),
                window.addEventListener("beforeinstallprompt", n=>{
                    n.preventDefault(),
                    gaEvent("Install", "available"),
                    t.installPrompt = n,
                    e.removeAttribute("disabled"),
                    e.classList.remove("hidden")
                }
                ),
                e.addEventListener("click", ()=>{
                    e.setAttribute("disabled", !0),
                    t.installPrompt.prompt(),
                    gaEvent("Install", "clicked")
                }
                ),
                myMenus.addKeyboardShortcut(e)
            }(app);
        </script>
        <script>
            "use strict";
            !function(e) {
                const t = document.getElementById("filePicker")
                  , n = document.getElementById("aDownloadFile");
                e.getFileLegacy = ()=>new Promise((e,n)=>{
                    t.onchange = c=>{
                        const o = t.files[0];
                        o ? e(o) : n(new Error("AbortError"))
                    }
                    ,
                    t.click()
                }
                ),
                e.saveAsLegacy = (e,t)=>{
                    e = e || "Untitled.txt";
                    const c = new File([t],"",{
                        type: "text/plain"
                    });
                    n.href = window.URL.createObjectURL(c),
                    n.setAttribute("download", e),
                    n.click()
                }
            }(app);
        </script>
</html>
